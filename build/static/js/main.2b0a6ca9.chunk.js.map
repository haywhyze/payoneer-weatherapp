{"version":3,"sources":["pages/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","minHeight","backgroundImage","paddingTop","paddingBottom","breakpoints","up","paper","padding","spacing","textAlign","display","color","palette","text","secondary","background","card","minWidth","cursor","hidden","visibility","media","height","Weather","matches","useMediaQuery","classes","useState","city","setCity","paginatedData","setPaginatedData","page","setPage","unit","setUnit","loading","setLoading","selectedDate","setSelectedDate","useEffect","a","units","fetch","res","json","data","sectionalData","list","forEach","e","dt_txt","split","push","className","Container","maxWidth","Grid","item","xs","Paper","Box","alignItems","width","flexDirection","FormControl","component","RadioGroup","aria-label","name","value","onChange","event","target","row","FormControlLabel","control","Radio","label","justifyContent","my","Button","onClick","ArrowBack","style","fontSize","Object","entries","length","ArrowForward","flexWrap","map","dailyData","index","Card","elevation","variant","CardHeader","title","country","subheader","Intl","DateTimeFormat","dateStyle","format","Date","CardMedia","image","weather","icon","CardContent","Typography","Math","round","reduce","acc","main","temp","CardActions","disableSpacing","description","chartType","loader","substring","options","legend","position","rootProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b0a6ca9.chunk.js","sourcesContent":["import { useState, useEffect, Fragment } from 'react';\nimport { Chart } from 'react-google-charts';\nimport {\n  Paper,\n  Grid,\n  Container,\n  Box,\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  CardHeader,\n  CardMedia,\n  CardActions,\n  useMediaQuery,\n} from '@material-ui/core';\nimport { ArrowBack, ArrowForward } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    minHeight: '100vh',\n    backgroundImage: 'url(./weather-background.jpg)',\n    paddingTop: '1rem',\n    paddingBottom: '1rem',\n    [theme.breakpoints.up('md')]: {\n      paddingTop: '4rem',\n      paddingBottom: '4rem',\n    },\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    display: 'flex',\n    color: theme.palette.text.secondary,\n    minHeight: 'calc(100vh - 2rem)',\n    background: 'rgba(255,255,255,0.6)',\n    [theme.breakpoints.up('md')]: {\n      padding: theme.spacing(4),\n      minHeight: 'calc(100vh - 4rem)',\n  },\n  },\n  card: {\n    minWidth: '38%',\n    cursor: 'pointer',\n    [theme.breakpoints.up('md')]: {\n      minWidth: '28%',\n    },\n  },\n  hidden: {\n    visibility: 'hidden',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n}));\n\nexport default function Weather() {\n  const matches = useMediaQuery('(min-width:960px)');\n  const classes = useStyles();\n  const [city, setCity] = useState(null);\n  const [paginatedData, setPaginatedData] = useState(null);\n  const [page, setPage] = useState(1);\n  const [unit, setUnit] = useState('farenheit');\n  const [loading, setLoading] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const handleUnit = (event) => {\n    setUnit(event.target.value);\n  };\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const units = unit === 'celcius' ? 'metric' : 'imperial';\n      const res = await fetch(\n        'http://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40&units=' +\n          units\n      );\n      const data = await res.json();\n      let sectionalData = {};\n      setLoading(false);\n      data?.list?.forEach((e) => {\n        if (sectionalData[e.dt_txt.split(' ')[0]]) {\n          sectionalData[e.dt_txt.split(' ')[0]].push(e);\n        } else {\n          sectionalData[e.dt_txt.split(' ')[0]] = [e];\n        }\n      });\n      if (selectedDate)\n        setSelectedDate([selectedDate[0], sectionalData[selectedDate[0]]]);\n      setPaginatedData({ ...sectionalData });\n      setCity(data.city);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [unit]);\n\n  return (\n    <div className={classes.root}>\n      <Container maxWidth='md'>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            {!loading && paginatedData && city ? (\n              <Box\n                display='flex'\n                alignItems='center'\n                width='100%'\n                flexDirection='column'\n              >\n                <FormControl component='fieldset'>\n                  <RadioGroup\n                    aria-label='unit'\n                    name='unit'\n                    value={unit}\n                    onChange={handleUnit}\n                    row\n                    width='100%'\n                  >\n                    <FormControlLabel\n                      value='farenheit'\n                      control={<Radio color='primary' />}\n                      label='Farenheit'\n                    />\n                    <FormControlLabel\n                      value='celcius'\n                      control={<Radio color='primary' />}\n                      label='Celcius'\n                    />\n                  </RadioGroup>\n                </FormControl>\n                <Box\n                  display='flex'\n                  width='100%'\n                  justifyContent='space-around'\n                  my={matches ? '1rem' : '.5rem'}\n                >\n                  <Button\n                    className={page <= 1 ? classes.hidden : ''}\n                    onClick={() => setPage(page - 1)}\n                  >\n                    <ArrowBack\n                      style={{ fontSize: matches ? '64px' : '32px' }}\n                    />\n                  </Button>\n                  <Button\n                    className={\n                      page < Object.entries(paginatedData).length - 2\n                        ? ''\n                        : classes.hidden\n                    }\n                    onClick={() => setPage(page + 1)}\n                  >\n                    <ArrowForward\n                      style={{ fontSize: matches ? '64px' : '32px' }}\n                    />\n                  </Button>\n                </Box>\n                <Box\n                  display='flex'\n                  width='100%'\n                  justifyContent='space-around'\n                  my={matches ? '2rem' : '.5rem'}\n                  flexWrap='wrap'\n                >\n                  {Object.entries(paginatedData)?.map((dailyData, index) => (\n                    <Fragment key={dailyData[0]}>\n                      {index >= page - 1 && index <= page + 1 ? (\n                        <Card\n                          onClick={() => setSelectedDate(dailyData)}\n                          className={classes.card}\n                          elevation={\n                            selectedDate && selectedDate[0] === dailyData[0]\n                              ? 6\n                              : 0\n                          }\n                          variant={\n                            selectedDate && selectedDate[0] !== dailyData[0]\n                              ? 'outlined'\n                              : 'elevation'\n                          }\n                        >\n                          <CardHeader\n                            title={city.name + ', ' + city.country}\n                            subheader={new Intl.DateTimeFormat('en-GB', {\n                              dateStyle: 'full',\n                            }).format(new Date(dailyData[0]))}\n                          />\n                          {matches && (\n                            <CardMedia\n                              className={classes.media}\n                              image={`https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/${dailyData[1][0]?.weather[0]?.icon}.png`}\n                              title='Paella dish'\n                            />\n                          )}\n                          <CardContent>\n                            <Typography variant={'h3'} component='h2'>\n                              {Math.round(\n                                dailyData[1].reduce(\n                                  (acc, e) => acc + e.main.temp,\n                                  0\n                                ) / dailyData[1].length\n                              )}\n                              °{unit === 'farenheit' ? 'F' : 'C'}\n                            </Typography>\n                          </CardContent>\n                          <CardActions disableSpacing>\n                            <Typography\n                              variant={matches ? 'h6' : 'body1'}\n                              component='h6'\n                            >\n                              {dailyData[1][0]?.weather[0]?.main}\n                            </Typography>\n                            &nbsp; ({dailyData[1][0]?.weather[0]?.description})\n                          </CardActions>\n                        </Card>\n                      ) : null}\n                    </Fragment>\n                  ))}\n                </Box>\n                {selectedDate && (\n                  <Chart\n                    width={'100%'}\n                    height={'300px'}\n                    chartType='Bar'\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                      ['Time', 'Temperature'],\n                      ...selectedDate[1]?.map((e) => [\n                        e.dt_txt.split(' ')[1].substring(0, 5),\n                        e.main.temp,\n                      ]),\n                    ]}\n                    options={{\n                      legend: { position: 'none' },\n                    }}\n                    // For tests\n                    rootProps={{ 'data-testid': '2' }}\n                  />\n                )}\n              </Box>\n            ) : (\n              <Box\n                display='flex'\n                alignItems='center'\n                justifyContent='center'\n                width='100%'\n              >\n                Loading...\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport Weather from './pages/Weather';\nimport './App.css';\n\nfunction App() {\n  return <Weather />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}